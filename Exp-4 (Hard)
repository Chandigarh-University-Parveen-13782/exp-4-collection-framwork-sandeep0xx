import java.util.ArrayList;

class TicketBookingSystem {
    private final int totalSeats;
    private final boolean[] seats;
    
    public TicketBookingSystem(int totalSeats) {
        this.totalSeats = totalSeats;
        this.seats = new boolean[totalSeats];
    }
    
    public synchronized boolean bookSeat(int seatNumber, String customerName) {
        if (seatNumber < 0 || seatNumber >= totalSeats) {
            System.out.println(customerName + " - Invalid seat number.");
            return false;
        }
        if (!seats[seatNumber]) {
            seats[seatNumber] = true;
            System.out.println(customerName + " successfully booked seat " + seatNumber);
            return true;
        } else {
            System.out.println(customerName + " - Seat " + seatNumber + " is already booked.");
            return false;
        }
    }
}

class Customer extends Thread {
    private final TicketBookingSystem bookingSystem;
    private final int seatNumber;
    private final String customerName;
    
    public Customer(TicketBookingSystem bookingSystem, int seatNumber, String customerName, int priority) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.customerName = customerName;
        setPriority(priority); // Higher priority for VIP customers
    }
    
    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, customerName);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem system = new TicketBookingSystem(10); // 10 seats available
        
        ArrayList<Customer> customers = new ArrayList<>();
        customers.add(new Customer(system, 5, "VIP John", Thread.MAX_PRIORITY));
        customers.add(new Customer(system, 5, "Regular Alice", Thread.MIN_PRIORITY));
        customers.add(new Customer(system, 3, "VIP Sarah", Thread.MAX_PRIORITY));
        customers.add(new Customer(system, 3, "Regular Bob", Thread.NORM_PRIORITY));
        
        for (Customer customer : customers) {
            customer.start();
        }
        
        for (Customer customer : customers) {
            try {
                customer.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}


/*  Output:
VIP John successfully booked seat 5
VIP Sarah successfully booked seat 3
Regular Bob - Seat 3 is already booked.
Regular Alice - Seat 5 is already booked.
*/
